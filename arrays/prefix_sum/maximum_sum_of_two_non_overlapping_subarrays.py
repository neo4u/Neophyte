from typing import List


# Approach 1: Brute Force
class SolutionBrute:
    def maxSumTwoNoOverlap(self, A: List[int], L: int, M: int) -> int:
        return max(self.helper(A, L, M), self.helper(A, M, L))

    def helper(self, nums, L, M):
        result, n = 0, len(nums)

        for i in range(n):
            j = i + L
            while j + M - 1 < n:
                sum1, sum2 = sum(nums[i:i + L]), sum(nums[j:j + M])
                result = max(result, sum1 + sum2)
                j += 1

        return result

# Time: O(n^3)
# Space: O(1)


# Approach 2: Cumulative Sum to avoid repeated range queries
class SolutionCumSum:
    def maxSumTwoNoOverlap(self, A: List[int], L: int, M: int) -> int:
        return max(self.helper(A, L, M), self.helper(A, M, L))

    def helper(self, nums, L, M):
        result, n = 0, len(nums)
        cum_sum = [0] * (n + 1)
        for i in range(1, n + 1): cum_sum[i] += cum_sum[i - 1] + nums[i - 1]

        for i in range(n):
            j = i + L
            while j + M - 1 < n:
                sum1, sum2 = cum_sum[i + L] - cum_sum[i], cum_sum[j + M] - cum_sum[j]
                result = max(result, sum1 + sum2)
                j += 1

        return result

# Time: O(n^2)
# Space: O(n)


class Solution:
    def maxSumTwoNoOverlap(self, A: List[int], L: int, M: int) -> int:
        for i in range(1, len(A)): A[i] += A[i - 1]             # Cumlative Sum 
        result, max_pre, max_suf = A[L + M - 1], A[L - 1], A[M - 1]
        n = len(A)

        # window  | --- L --- | --- M --- |
        for i in range(L + M, n):
            max_pre = max(max_pre, A[i - M] - A[i - L - M])
            result = max(result, max_pre + A[i] - A[i - M])

        # window  | --- M --- | --- L --- |
        for i in range(L + M, n):
            max_suf = max(max_suf, A[i - L] - A[i - L - M])
            result = max(result, max_suf + A[i] - A[i - L])

        return result


# So the problem is essentially 2 separate cases.

# But it's important to keep in mind that the L+M maximum could be reached before L & M separate from each other
# So you cannot divide each case into simply 2 steps:

# find the global maximum of the window on the left
# find the maximum of the second window in the region to the right of the first window
# case 1: L-window comes before M-windows
# Once L-window reaches it's global maximum, it will stop sliding but M window can keep going on

# case 2: M-window comes before L-windows
# Once M-window reaches it's global maximum, it will stop sliding but L window can keep going on


# 1031. Maximum Sum of Two Non-Overlapping Subarrays
# https://leetcode.com/problems/maximum-sum-of-two-non-overlapping-subarrays/description/

sol = SolutionBrute()

assert sol.maxSumTwoNoOverlap([
    812,828,732,751,485,423,730,361,3,368,120,36,592,
    777,820,678,761,7,475,128,46,316,888,257,44,287,
    539,393,50,175,226,603,433,989,688,961,823,231,
    119,356,251,576,478,608,586,178,583,775,869,722,
    890,439,600,94,142,515,596,435,36,750,602,164,584,
    710,991,670,238,79,302,230,960,325,551,865,547,499,
    778,300,501,282,489,249,334,709,817,176,958,886,709,
    698,705,918,632,888,206,381,707,735,379,826,495,427,
    660,387,52,56,310,587,90,122,716,943,683,737,436,768,
    819,398,364,866,479,647,592,131,708,589,820,692,644,
    726,575,285,564,546,306,269,43,954,383,225,814,697,
    440,476,896,305,104,578,113,954,873,272,623,592,852,
    583,341,198,177,382,30,834,724,864,945,749,509,594,335
    ,350,570,267,834,168,795,53,209,215,315,571,611,548,93,
    430,908,938,298,628,802,931,827,680,961,427,20,383,486,
    839,212,188,211,128,908,10,251,534,356,934,474,896,387,
    108,183,19,197,483,748,37,90,184,433,420,701,376,637,56,
    772,414,393,831,631,914,655,852,173,199,158,203,229,639,
    934,695,932,941,661,313,548,651,156,454,646,661,945,998,
    808,862,631,198,149,946,332,767,256,61,797,6,889,683,990,
    529,872,973,49,941,610,346,258,823,556,547,33,582,376,377,
    109,563,461,72,40,501,606,329,679,788,967,875,908,549,911,
    216,741,843,669,269,620,496,405,261,93,28,230,926,947,49,760,
    185,751,935,1000,738,337,881,115,387,72,916,690,70,84,619,341,
    760,448,146,544,353,93,825,895,687,971,509,927,971,222,871,935,
    740,363,43,453,848,126,745,82,684,373,340,963,936,185,99,978,
    430,566,461,300,799,571,359,990,497,332,755,614,870,77,764,
    811,164,897,651,389,703,965,209,190,324,106,609,119,3,309,
    278,576,252,714,349,721,365,775,152,101,833,508,738,726,745,
    199,481,54,54,920,265,462,811,805,604,656,969,697,601,987,
    138,731,182,195,156,280,79,619,913,36,469,262,124,402,957,
    359,224,619,409,457,652,82,3,941,750,319,475,834,164,601,
    50,334,355,766,883,404,836,248,351,295,610,953,537,130,688,
    306,856,530,866,749,717,924,546,868,354,365,306,469,643,915,
    412,292,951,844,791,516,200,961,308,398,116,534,560,96,5,966,
    560,472,90,994,344,423,499,217,4,503,770,406,732,521,696,185,690,75,
    601,807,732,378,133,136,586,57,479,745,856,86,939,678,557,999,149,677,272,130,
    554,733,20,909,723,842,376,930,364,337,626,70,952,551,811,537,219,687,930,808,
    359,347,577,417,3,197,976,802,896,887,66,435,206,106,809,676,176,723,161,383,
    200,186,247,669,846,217,452,667,294,512,348,47,157,41,60,696,93,785,969,753,
    466,35,363,552,639,369,469,734,540,846,108,402,791,673,766,119,317,878,105,
    790,573,968,492,65,220,777,391,196,979,35,291,600,677,312,447,241,891,53,186,
    986,666,90,840,221,17,212,815,924,504,423,420,541,138,679,16,893,338,451,811,
    956,928,769,401,314,158,992,684,214,184,222,778,504,162,531,362,2,517,361,524,
    457,54,910,968,665,889,877,593,891,930,57,267,43,993,26,644,884,798,65,469,527,
    201,460,158,59,693,926,460,607,826,825,201,961,907,330,813,387,992,726,607,988,
    49,356,771,418,872,118,275,466,370,204,14,517,455,572,446,716,856,872,140,437,484,
    449,525,309,326,200,838,841,747,16,244,852,138,829,560,321,184,929,814,762,526,310,
    785,34,38,10,479,569,191,181,161,115,666,878,996,116,273,291,262,675,484,829,189,
    290,229,463,243,742,979,474,954,622,914,284,605,264,663,127,883,568,974,205,280,
    888,739,690,295,594,31,48,488,481,183,347,128,793,7,352,367,490,329,993,717,92,
    72,866,443,573,740,741,661,703,342,516,979,480,508,530,747,268,17,18,688,956,767,
    490,646,30,202,693,590,285,773,529,97,913,189,757,490,226,653,747,694,845,365,
    171,752,171,775,877,0,551,112,481,131,203,133,911,176,916,138,453,521,393,748,
    623,759,301,900,567,75,711,741,699,727,883,307,676,878,189,206,876,726,976,245,
    683,5,205,387,653,931,594,110,244,680,598,601,925,767,478,689,591,979,291,963,
    699,567,327,759,32,519,620,128,584,798,681,115,656,806,875,794,984,470,666,846,
    675,894,545,942,591,751,227,657,229,597,813,18,879,78,81,385,450,324,87,216,686,
    529,901,972,171,333,760,557,981,480,993,638,927,359,198,150,717,870,372,964,888,
    524,396,181,138,125,976,538,151,896,374,30,112,438,349,659,217,272
], 704, 121) == 427831
assert sol.maxSumTwoNoOverlap([0,6,5,2,2,5,1,9,4], 1, 2) == 20
assert sol.maxSumTwoNoOverlap([3,8,1,3,2,1,8,9,0], 3, 2) == 29
assert sol.maxSumTwoNoOverlap([2,1,5,6,0,9,5,0,3,8], 4, 3) == 31


sol = SolutionCumSum()
assert sol.maxSumTwoNoOverlap([
    812,828,732,751,485,423,730,361,3,368,120,36,592,
    777,820,678,761,7,475,128,46,316,888,257,44,287,
    539,393,50,175,226,603,433,989,688,961,823,231,
    119,356,251,576,478,608,586,178,583,775,869,722,
    890,439,600,94,142,515,596,435,36,750,602,164,584,
    710,991,670,238,79,302,230,960,325,551,865,547,499,
    778,300,501,282,489,249,334,709,817,176,958,886,709,
    698,705,918,632,888,206,381,707,735,379,826,495,427,
    660,387,52,56,310,587,90,122,716,943,683,737,436,768,
    819,398,364,866,479,647,592,131,708,589,820,692,644,
    726,575,285,564,546,306,269,43,954,383,225,814,697,
    440,476,896,305,104,578,113,954,873,272,623,592,852,
    583,341,198,177,382,30,834,724,864,945,749,509,594,335
    ,350,570,267,834,168,795,53,209,215,315,571,611,548,93,
    430,908,938,298,628,802,931,827,680,961,427,20,383,486,
    839,212,188,211,128,908,10,251,534,356,934,474,896,387,
    108,183,19,197,483,748,37,90,184,433,420,701,376,637,56,
    772,414,393,831,631,914,655,852,173,199,158,203,229,639,
    934,695,932,941,661,313,548,651,156,454,646,661,945,998,
    808,862,631,198,149,946,332,767,256,61,797,6,889,683,990,
    529,872,973,49,941,610,346,258,823,556,547,33,582,376,377,
    109,563,461,72,40,501,606,329,679,788,967,875,908,549,911,
    216,741,843,669,269,620,496,405,261,93,28,230,926,947,49,760,
    185,751,935,1000,738,337,881,115,387,72,916,690,70,84,619,341,
    760,448,146,544,353,93,825,895,687,971,509,927,971,222,871,935,
    740,363,43,453,848,126,745,82,684,373,340,963,936,185,99,978,
    430,566,461,300,799,571,359,990,497,332,755,614,870,77,764,
    811,164,897,651,389,703,965,209,190,324,106,609,119,3,309,
    278,576,252,714,349,721,365,775,152,101,833,508,738,726,745,
    199,481,54,54,920,265,462,811,805,604,656,969,697,601,987,
    138,731,182,195,156,280,79,619,913,36,469,262,124,402,957,
    359,224,619,409,457,652,82,3,941,750,319,475,834,164,601,
    50,334,355,766,883,404,836,248,351,295,610,953,537,130,688,
    306,856,530,866,749,717,924,546,868,354,365,306,469,643,915,
    412,292,951,844,791,516,200,961,308,398,116,534,560,96,5,966,
    560,472,90,994,344,423,499,217,4,503,770,406,732,521,696,185,690,75,
    601,807,732,378,133,136,586,57,479,745,856,86,939,678,557,999,149,677,272,130,
    554,733,20,909,723,842,376,930,364,337,626,70,952,551,811,537,219,687,930,808,
    359,347,577,417,3,197,976,802,896,887,66,435,206,106,809,676,176,723,161,383,
    200,186,247,669,846,217,452,667,294,512,348,47,157,41,60,696,93,785,969,753,
    466,35,363,552,639,369,469,734,540,846,108,402,791,673,766,119,317,878,105,
    790,573,968,492,65,220,777,391,196,979,35,291,600,677,312,447,241,891,53,186,
    986,666,90,840,221,17,212,815,924,504,423,420,541,138,679,16,893,338,451,811,
    956,928,769,401,314,158,992,684,214,184,222,778,504,162,531,362,2,517,361,524,
    457,54,910,968,665,889,877,593,891,930,57,267,43,993,26,644,884,798,65,469,527,
    201,460,158,59,693,926,460,607,826,825,201,961,907,330,813,387,992,726,607,988,
    49,356,771,418,872,118,275,466,370,204,14,517,455,572,446,716,856,872,140,437,484,
    449,525,309,326,200,838,841,747,16,244,852,138,829,560,321,184,929,814,762,526,310,
    785,34,38,10,479,569,191,181,161,115,666,878,996,116,273,291,262,675,484,829,189,
    290,229,463,243,742,979,474,954,622,914,284,605,264,663,127,883,568,974,205,280,
    888,739,690,295,594,31,48,488,481,183,347,128,793,7,352,367,490,329,993,717,92,
    72,866,443,573,740,741,661,703,342,516,979,480,508,530,747,268,17,18,688,956,767,
    490,646,30,202,693,590,285,773,529,97,913,189,757,490,226,653,747,694,845,365,
    171,752,171,775,877,0,551,112,481,131,203,133,911,176,916,138,453,521,393,748,
    623,759,301,900,567,75,711,741,699,727,883,307,676,878,189,206,876,726,976,245,
    683,5,205,387,653,931,594,110,244,680,598,601,925,767,478,689,591,979,291,963,
    699,567,327,759,32,519,620,128,584,798,681,115,656,806,875,794,984,470,666,846,
    675,894,545,942,591,751,227,657,229,597,813,18,879,78,81,385,450,324,87,216,686,
    529,901,972,171,333,760,557,981,480,993,638,927,359,198,150,717,870,372,964,888,
    524,396,181,138,125,976,538,151,896,374,30,112,438,349,659,217,272
], 704, 121) == 427831
assert sol.maxSumTwoNoOverlap([0,6,5,2,2,5,1,9,4], 1, 2) == 20
assert sol.maxSumTwoNoOverlap([3,8,1,3,2,1,8,9,0], 3, 2) == 29
assert sol.maxSumTwoNoOverlap([2,1,5,6,0,9,5,0,3,8], 4, 3) == 31
