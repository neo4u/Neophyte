Dir['sorting/*.rb'].each do |file|
  require_relative File.join('../', File.dirname(file), File.basename(file, File.extname(file)))
end

# describe '#merge_sort' do
#   it 'Should sort arrays' do
#     expect(merge_sort_prac([5, 6, 7, 8, 1, 2, 3, 4])).to eql([1, 2, 3, 4, 5, 6, 7, 8])
#     expect(merge_sort_prac([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])).to eql([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
#     expect(merge_sort_prac([11, 0, 10, 1, 9, 2, 8, 3, 7, 4, 6, 5])).to eql([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
#   end
# end

# describe '#counting_sort' do
#   it 'Should sort arrays' do
#     expect(counting_sort_prac([5, 6, 7, 8, 1, 2, 3, 4])).to eql([1, 2, 3, 4, 5, 6, 7, 8])
#     expect(counting_sort_prac([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])).to eql([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
#     expect(counting_sort_prac([11, 0, 10, 1, 9, 2, 8, 3, 7, 4, 6, 5])).to eql([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
#   end
# end

# describe '#insertion_sort' do
#   it 'Should sort arrays' do
#     expect(insertion_sort_prac([5, 6, 7, 8, 1, 2, 3, 4])).to eql([1, 2, 3, 4, 5, 6, 7, 8])
#     expect(insertion_sort_prac([0, 1, 2, 3, 4, -5, 6, 7, 8, 9, -10, -11])).to eql([-11, -10, -5, 0, 1, 2, 3, 4, 6, 7, 8, 9])
#     expect(insertion_sort_prac([1_100_000, 0, 10, 1, 9, 29_038_453, 8, 3, 7, 4, 6, 5])).to eql([0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 1_100_000, 29_038_453])
#   end
# end

# describe '#counting_sort' do
#   it 'Should sort arrays' do
#     expect(counting_sort_prac([5, 6, 7, 8, 1, 2, 3, 4])).to eql([1, 2, 3, 4, 5, 6, 7, 8])
#     expect(counting_sort_prac([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])).to eql([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
#     expect(counting_sort_prac([11, 0, 10, 1, 9, 2, 8, 3, 7, 4, 6, 5])).to eql([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
#   end
# end

# describe '#quick_sort' do
#   it 'Should sort arrays' do
#     expect(quick_sort_prac([5, 6, 7, 8, 1, 2, 3, 4])).to eql([1, 2, 3, 4, 5, 6, 7, 8])
#     expect(quick_sorcd t_prac([0, 1, 2, 3, 4, -5, 6, 7, 8, 9, -10, -11])).to eql([-11, -10, -5, 0, 1, 2, 3, 4, 6, 7, 8, 9])
#     expect(quick_sort_prac([1_100_000, 0, 10, 1, 9, 29_038_453, 8, 3, 7, 4, 6, 5])).to eql([0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 1_100_000, 29_038_453])
#   end
# end

describe '#heap_sort' do
  it 'Should sort arrays' do
    # expect(heap_sort([5, 6, 7, 8, 1, 2, 3, 4])).to eql([1, 2, 3, 4, 5, 6, 7, 8])
    expect(heap_sort([11, 0, 10, 1, 9, 2, 8, 3, 7, 4, 6, 5])).to eql([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
    # expect(heap_sort([0, 1, 2, 3, 4, 5, 6, 7, -10, 9, 0, 11])).to eql([-10, 0, 0, 1, 2, 3, 4, 5, 6, 7, 9, 11])
    # expect(heap_sort([0, 1, 2, 3, 4, -50_000, 6, 7, 8, 9, 10, 11])).to eql([-50_000, 0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11])
  end
end

# describe '#bucket_sort' do
#   it 'Should sort arrays' do
#     expect(bucket_sort_prac([
#       0.78, 0.17, 0.39, 0.26, 0.72, 0.94, 0.21, 0.12, 0.23, 0.68, 0.78, 0.17, 0.39, 0.26, 0.72,
#       0.94, 0.21, 0.12, 0.23, 0.68, 0.78, 0.17, 0.39, 0.26, 0.72, 0.94, 0.21, 0.12, 0.23, 0.68,
#       0.78, 0.17, 0.39, 0.26, 0.72, 0.94, 0.21, 0.12, 0.23, 0.68, 0.78, 0.17, 0.39, 0.26, 0.72,
#       0.94, 0.21, 0.12, 0.23, 0.68, 0.78, 0.17, 0.39, 0.26, 0.72, 0.94, 0.21, 0.12, 0.23, 0.68,
#       0.78, 0.17, 0.39, 0.26, 0.72, 0.94, 0.21, 0.12, 0.23, 0.68, 0.78, 0.17, 0.39, 0.26, 0.72,
#       0.94, 0.21, 0.12, 0.23, 0.68
#     ])).to eql([
#       0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.17, 0.17, 0.17, 0.17, 0.17, 0.17, 0.17,
#       0.17, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.23, 0.23, 0.23, 0.23, 0.23, 0.23,
#       0.23, 0.23, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.39, 0.39, 0.39, 0.39, 0.39,
#       0.39, 0.39, 0.39, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.72, 0.72, 0.72, 0.72,
#       0.72, 0.72, 0.72, 0.72, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.94, 0.94, 0.94,
#       0.94, 0.94, 0.94, 0.94, 0.94
#     ])
#     expect(bucket_sort_prac(
#       [0.78, 0.17, 0.39, 0.26, 0.72, 0.94, 0.21, 0.12, 0.23, 0.68, 0.78, 0.17, 0.39, 0.26, 0.72]
#     )).to eql(
#       [0.12, 0.17, 0.17, 0.21, 0.23, 0.26, 0.26, 0.39, 0.39, 0.68, 0.72, 0.72, 0.78, 0.78, 0.94]
#     )
#   end
# end
